============================
How to use 4-print_square.py
============================

This module defines a function ``print_square(size)``.

usage
=====

``print_square`` prints a square with the character "#".

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(3)
	###
	###
	###

::
	
	>>> print_square(6)
	######
	######
	######
	######
	######
	######

::

	>>> print_square(2 * 5)
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########

if ``size`` is 0, nothing is printed and no exception is raised.

::

	>>> print_square(0)
	>>>

invalid values
==============

The function parameter ``size`` can not be a float, otherwise a TypeError exception is raise.

::
	
	>>> print_square(3.5)
	Traceback (most recent call last):
	TypeError: size must be an integer

A ValueError exception is thrown if ``size`` is less 0.

::

	>>> print_square(-3)
	Traceback (most recent call last):
	ValueError: size must be >= 0

A TypeError is raised if ``size`` is less than 0 and size is a float.

::

>>> print_square(-6.0)
Traceback (most recent call last):
TypeError: size must be an integer

if ``size`` is a string, a TypeError exception is raised.
::

	>>> print_square("4")
	Traceback (most recent call last):
	TypeError: size must be an integer

``size`` cannot be None, otherwise a TypeError exception is raised.
::

	>>> print_square(None)
	Traceback (most recent call last):
	TypeError: size must be an integer

``size`` cannot be a list, otherwise a TypeError is raised.

::
	>>> print_square([3])
	Traceback (most recent call last):
	TypeError: size must be an integer

``size`` cannot be a dictionary, otherwise a TypeError is raised.

::

	>>> print_square({"size": 4})
	Traceback (most recent call last):
	TypeError: size must be an integer
